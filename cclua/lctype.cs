using System;

namespace cclua {

    public static partial class imp {

        public static class lctype {

            public const int ALPHABIT = 0;
            public const int DIGITBIT = 1;
            public const int PRINTBIT = 2;
            public const int SPACEBIT = 3;
            public const int XDIGITBIT = 4;


            public static int MASK (int b) { return (1 << b); }


            /*
            ** add 1 to char to allow index -1 (EOZ)
            */
            public static bool testprop (int c, int p) { return ((lctype.luai_ctype_[c + 1] & p) != 0); }


            public static byte[] luai_ctype_ = {
                0x00,  /* EOZ */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* 0. */
                0x00,  0x08,  0x08,  0x08,  0x08,  0x08,  0x00,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* 1. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
                0x0c,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,	/* 2. */
                0x04,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,
                0x16,  0x16,  0x16,  0x16,  0x16,  0x16,  0x16,  0x16,	/* 3. */
                0x16,  0x16,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,
                0x04,  0x15,  0x15,  0x15,  0x15,  0x15,  0x15,  0x05,	/* 4. */
                0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,
                0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,	/* 5. */
                0x05,  0x05,  0x05,  0x04,  0x04,  0x04,  0x04,  0x05,
                0x04,  0x15,  0x15,  0x15,  0x15,  0x15,  0x15,  0x05,	/* 6. */
                0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,
                0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,	/* 7. */
                0x05,  0x05,  0x05,  0x04,  0x04,  0x04,  0x04,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* 8. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* 9. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* a. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* b. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* c. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* d. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* e. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* f. */
                0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
            };
        }


        /*
        ** 'lalpha' (Lua alphabetic) and 'lalnum' (Lua alphanumeric) both include '_'
        */
        public static bool lislalpha (int c) { return lctype.testprop (c, lctype.MASK (lctype.ALPHABIT)); }
        public static bool lislalnum (int c) { return lctype.testprop (c, lctype.MASK (lctype.ALPHABIT) | lctype.MASK (lctype.DIGITBIT)); }
        public static bool lisdigit (int c) { return lctype.testprop (c, lctype.MASK (lctype.DIGITBIT)); }
        public static bool lisspace (int c) { return lctype.testprop (c, lctype.MASK (lctype.SPACEBIT)); }
        public static bool lisprint (int c) { return lctype.testprop (c, lctype.MASK (lctype.PRINTBIT)); }
        public static bool lisxdigit (int c) { return lctype.testprop (c, lctype.MASK (lctype.XDIGITBIT)); }


        /*
        ** this 'ltolower' only works for alphabetic characters
        */
        public static int ltolower (int c) { return (c | ('A' ^ 'a')); }













    }

}
